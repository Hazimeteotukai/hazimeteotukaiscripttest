-- シーザー暗号のシフト数
local shift = 3

-- ファイルを読み込む関数
local function readFile(filename)
    local file = io.open(filename, "r")
    if not file then
        return nil, "ファイルを開くことができません: " .. filename
    end
    local content = file:read("*a")
    file:close()
    return content
end

-- ファイルを書き込む関数
local function writeFile(filename, content)
    local file = io.open(filename, "w")
    if not file then
        return nil, "ファイルを書き込むことができません: " .. filename
    end
    file:write(content)
    file:close()
    return true
end

-- シーザー暗号で文字列を暗号化する関数
local function caesarEncrypt(text, shift)
    local encrypted = {}
    for i = 1, #text do
        local c = text:sub(i, i)
        local byte = string.byte(c)
        -- 英数字の範囲内でシフトさせる
        if byte >= 65 and byte <= 90 then
            -- 大文字 (A-Z)
            encrypted[i] = string.char(((byte - 65 + shift) % 26) + 65)
        elseif byte >= 97 and byte <= 122 then
            -- 小文字 (a-z)
            encrypted[i] = string.char(((byte - 97 + shift) % 26) + 97)
        elseif byte >= 48 and byte <= 57 then
            -- 数字 (0-9)
            encrypted[i] = string.char(((byte - 48 + shift) % 10) + 48)
        else
            -- その他の文字はそのまま
            encrypted[i] = c
        end
    end
    return table.concat(encrypted)
end

-- メイン処理
local function main(inputFilename, outputFilename)
    local content, err = readFile(inputFilename)
    if not content then
        print(err)
        return
    end

    local encryptedContent = caesarEncrypt(content, shift)

    local success, err = writeFile(outputFilename, encryptedContent)
    if not success then
        print(err)
        return
    end

    print("ファイルが暗号化されました: " .. outputFilename)
end

-- 入力ファイルと出力ファイルのパスを指定
local inputFilename = "input.lua"
local outputFilename = "encrypted.lua"

-- メイン処理を実行
main(inputFilename, outputFilename)
